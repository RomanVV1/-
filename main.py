import sysdef minimum_key_value(key, visited):    min_value = sys.maxsize    for vertex in range(len(key)):        if key[vertex] < min_value and not visited[vertex]:            min_value = key[vertex]            min_vertex = vertex    return min_vertexdef prim_algorithm(graph):    num_of_vertices = len(graph)    parent = [None] * num_of_vertices    key = [sys.maxsize] * num_of_vertices    key[0] = 0    visited = [False] * num_of_vertices    for i in range(num_of_vertices):        u = minimum_key_value(key, visited)        visited[u] = True        for v in range(num_of_vertices):            if graph[u][v] > 0 and not visited[v] and graph[u][v] < key[v]:                key[v] = graph[u][v]                parent[v] = u    return parent, keygraph = [[0, 3, 0, 0, 0, 34, 0, 80],         [3, 0, 0, 1, 0, 0, 0, 68],         [0, 0, 0, 0, 23, 0, 12, 0],         [0, 1, 0, 0, 53, 0, 0, 39],         [0, 0, 23, 53, 0, 0, 68, 14],         [34, 0, 0, 0, 0, 0, 0, 25],         [0, 0, 12, 0, 68, 0, 0, 99],         [80, 68, 0, 39, 14, 25, 99, 0]]parent, key = prim_algorithm(graph)print("Vertex \t Weight")for i in range(1, len(parent)):    print(parent[i], "-", i, "\t", graph[i][parent[i]])